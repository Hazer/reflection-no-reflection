#if( $packageName )
package $packageName;
#end

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.lang.annotation.Annotation;
import java.lang.reflect.Modifier;
import org.reflection_no_reflection.no_reflection.AnnotationDatabase;
import org.reflection_no_reflection.Field;
import org.reflection_no_reflection.no_reflection.NoReflectionField;
import org.reflection_no_reflection.no_reflection.FieldGetterAndSetter;

public class AnnotationDatabaseImpl extends AnnotationDatabase {
  static {
    fieldGetterAndSetter = new FieldGetterAndSetterImpl();
  }

  public void fillAnnotationClassesAndFieldsNames(HashMap<String, Map<String, Set<Field>>> mapAnnotationToMapClassWithInjectionNameToFieldSet) {
#if( !$mapAnnotationToMapClassWithInjectionNameToFieldSet.isEmpty() )

    String annotationClassName = null;
    Map<String, Set<Field>> mapClassWithInjectionNameToFieldSet = null;
    Set<Field> fieldNameSet = null;
    int id = 0;
    List<Annotation> annotationList;
#foreach( $annotationName in $mapAnnotationToMapClassWithInjectionNameToFieldSet.keySet() )

    annotationClassName = "$annotationName";
    mapClassWithInjectionNameToFieldSet = mapAnnotationToMapClassWithInjectionNameToFieldSet.get(annotationClassName);
    if( mapClassWithInjectionNameToFieldSet == null ) {
      mapClassWithInjectionNameToFieldSet = new HashMap<String, Set<Field>>();
      mapAnnotationToMapClassWithInjectionNameToFieldSet.put(annotationClassName, mapClassWithInjectionNameToFieldSet);
    }

#foreach( $className in $mapAnnotationToMapClassWithInjectionNameToFieldSet.get($annotationName).keySet() )
    fieldNameSet = new HashSet<Field>();
#foreach( $field in $mapAnnotationToMapClassWithInjectionNameToFieldSet.get($annotationName).get($className) )
    annotationList = new ArrayList<Annotation>();
#foreach( $annotation in $field.AnnotationList )
#set( $annotationClassName = $annotation.AnnotationTypeName)
#set( $annotationClassNameShort = $annotationClassName.replace('.','_'))
    annotationList.add( new Generated_${annotationClassNameShort}());
#end
    fieldNameSet.add(new LocalNoReflectionField(id++, "$field.Name", "$className", "$field.TypeName", Modifier.PUBLIC, annotationList));
#end
    mapClassWithInjectionNameToFieldSet.put("$className", fieldNameSet);
#end
#end
#end
  }

  public void fillAnnotationClassesAndMethods(HashMap<String, Map<String, Set<String>>> mapAnnotationToMapClassWithInjectionNameToMethodsSet) {
#if( !$mapAnnotationToMapClassWithInjectionNameToMethodSet.isEmpty() )

    String annotationClassName = null;
    Map<String, Set<String>> mapClassWithInjectionNameToMethodSet = null;
    Set<String> methodSet = null;

#foreach( $annotationName in $mapAnnotationToMapClassWithInjectionNameToMethodSet.keySet() )

    annotationClassName = "$annotationName";
    mapClassWithInjectionNameToMethodSet = mapAnnotationToMapClassWithInjectionNameToMethodsSet.get(annotationClassName);
    if( mapClassWithInjectionNameToMethodSet == null ) {
      mapClassWithInjectionNameToMethodSet = new HashMap<String, Set<String>>();
      mapAnnotationToMapClassWithInjectionNameToMethodsSet.put(annotationClassName, mapClassWithInjectionNameToMethodSet);
    }

#foreach( $className in $mapAnnotationToMapClassWithInjectionNameToMethodSet.get($annotationName).keySet() )
    methodSet = new HashSet<String>();
#foreach( $method in $mapAnnotationToMapClassWithInjectionNameToMethodSet.get($annotationName).get($className) )
    methodSet.add("$method");
#end
    mapClassWithInjectionNameToMethodSet.put("$className", methodSet);
#end
#end
#end
  }

  public void fillAnnotationClassesAndConstructors(HashMap<String, Map<String, Set<String>>> mapAnnotationToMapClassWithInjectionNameToConstructorsSet) {
#if( !$mapAnnotationToMapClassWithInjectionNameToConstructorSet.isEmpty() )

    String annotationClassName = null;
    Map<String, Set<String>> mapClassWithInjectionNameToConstructorSet = null;
    Set<String> constructorSet = null;

#foreach( $annotationName in $mapAnnotationToMapClassWithInjectionNameToConstructorSet.keySet() )

    annotationClassName = "$annotationName";
    mapClassWithInjectionNameToConstructorSet = mapAnnotationToMapClassWithInjectionNameToConstructorsSet.get(annotationClassName);
    if( mapClassWithInjectionNameToConstructorSet == null ) {
      mapClassWithInjectionNameToConstructorSet = new HashMap<String, Set<String>>();
      mapAnnotationToMapClassWithInjectionNameToConstructorsSet.put(annotationClassName, mapClassWithInjectionNameToConstructorSet);
    }

#foreach( $className in $mapAnnotationToMapClassWithInjectionNameToConstructorSet.get($annotationName).keySet() )
    constructorSet = new HashSet<String>();
#foreach( $constructor in $mapAnnotationToMapClassWithInjectionNameToConstructorSet.get($annotationName).get($className) )
    constructorSet.add("$constructor");
#end
    mapClassWithInjectionNameToConstructorSet.put("$className", constructorSet);
#end
#end
#end
  }

  public void fillClassesContainingInjectionPointSet(HashSet<String> classesContainingInjectionPointsSet) {
#foreach( $className in $classesContainingInjectionPointsSet )
    classesContainingInjectionPointsSet.add("$className");
#end
  }


  public void fillBindableClasses(HashSet<String> injectedClasses) {
#foreach( $className in $injectedClasses )
    injectedClasses.add("$className");
#end
  }
}

//-------------------------
// ANNOTATIONS
//-------------------------

#if( !$mapAnnotationNameToAnnotation.isEmpty() )
#foreach( $annotationName in $mapAnnotationNameToAnnotation.keySet() )
#set( $annotationClassName = $mapAnnotationNameToAnnotation.get($annotationName).getAnnotationTypeName())
#set( $annotationClassNameShort = $annotationClassName.replace('.','_'))
class Generated_${annotationClassNameShort} implements ${annotationClassName}{
    @Override
    public Class<? extends Annotation> annotationType() {
        return ${annotationClassName}.class;
    }
}
#end
#end

//-------------------------
// FIELD GETTER AND SETTER
//-------------------------
/**
 * Allows to access all fields, bypassing visibility modifiers.
 */
class FieldGetterAndSetterImpl implements FieldGetterAndSetter {

  public Object get(int index, Object object) throws IllegalAccessException {
#if( !$mapAnnotationToMapClassWithInjectionNameToFieldSet.isEmpty() )
#set( $id = 0 )
    System.out.println("get on " + object.toString() + " field index " + index);
    switch(index) {
#foreach( $annotationName in $mapAnnotationToMapClassWithInjectionNameToFieldSet.keySet() )
#foreach( $className in $mapAnnotationToMapClassWithInjectionNameToFieldSet.get($annotationName).keySet() )
#foreach( $field in $mapAnnotationToMapClassWithInjectionNameToFieldSet.get($annotationName).get($className) )
      case $id: return ((${field.DeclaringClassName}) object).${field.Name};
#set( $id = $id + 1 )
#end
      default: throw new IllegalArgumentException("No setter for this index:" + index);
#end
#end
#end
    }
  }

  public void set(int index, Object object, Object value) throws IllegalAccessException {
#if( !$mapAnnotationToMapClassWithInjectionNameToFieldSet.isEmpty() )
#set( $id = 0 )
    switch(index) {
#foreach( $annotationName in $mapAnnotationToMapClassWithInjectionNameToFieldSet.keySet() )
#foreach( $className in $mapAnnotationToMapClassWithInjectionNameToFieldSet.get($annotationName).keySet() )
#foreach( $field in $mapAnnotationToMapClassWithInjectionNameToFieldSet.get($annotationName).get($className) )
      case $id: ((${field.DeclaringClassName}) object).${field.Name} = (${field.TypeName}) value; break;
#set( $id = $id + 1 )
#end
      default: throw new IllegalArgumentException("No setter for this index:" + index);
#end
#end
#end
    }
  }

#set( $primitiveTypes = { "byte" : "Byte", "short" : "Short", "int" : "Int", "long" : "Long", "float" : "Float", "double" : "Double", "boolean" : "Boolean", "char" : "Char" } )
#foreach( $entry in $primitiveTypes.entrySet() )
#set( $low = $entry.getKey() )
#set( $up = $entry.getValue() )
  public $low get$up(int index, Object object) throws IllegalAccessException {
#if( !$mapAnnotationToMapClassWithInjectionNameToFieldSet.isEmpty() )
#set( $id = 0 )
    switch(index) {
#foreach( $annotationName in $mapAnnotationToMapClassWithInjectionNameToFieldSet.keySet() )
#foreach( $className in $mapAnnotationToMapClassWithInjectionNameToFieldSet.get($annotationName).keySet() )
#foreach( $field in $mapAnnotationToMapClassWithInjectionNameToFieldSet.get($annotationName).get($className) )
      case $id:
#if( ${field.TypeName} == "$low" )
        return ((${field.DeclaringClassName}) object).${field.Name};
#else
        throw new IllegalArgumentException("Not a $low");
#end

#set( $id = $id + 1 )
#end
        default: throw new IllegalArgumentException("No a $low at this index:" + index);
#end
#end
#end
    }
  }

  public void set$up(int index, Object object, $low value) throws IllegalAccessException {
#if( !$mapAnnotationToMapClassWithInjectionNameToFieldSet.isEmpty() )
#set( $id = 0 )
    switch(index) {
#foreach( $annotationName in $mapAnnotationToMapClassWithInjectionNameToFieldSet.keySet() )
#foreach( $className in $mapAnnotationToMapClassWithInjectionNameToFieldSet.get($annotationName).keySet() )
#foreach( $field in $mapAnnotationToMapClassWithInjectionNameToFieldSet.get($annotationName).get($className) )
      case $id:
#if( ${field.TypeName} == "$low" )
        ((${field.DeclaringClassName}) object).${field.Name} = value; break;
#else
        throw new IllegalArgumentException("Not a $low");
#end
#set( $id = $id + 1 )
#end
      default: throw new IllegalArgumentException("No setter for this index:" + index);
#end
#end
#end
    }
  }

#end

}

 